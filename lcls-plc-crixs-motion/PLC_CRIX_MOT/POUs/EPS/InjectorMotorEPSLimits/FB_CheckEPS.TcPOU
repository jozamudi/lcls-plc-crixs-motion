<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_CheckEPS" Id="{34d78ab9-508b-476a-b7bf-433873b84d5d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CheckEPS
VAR_IN_OUT
    stMotor	: ST_MotionStage;
    aEPSLimits : ARRAY [*] OF ST_EPSLimits;
    // Allows for user to define what is 'forward' and what is 'backward'. In most cases, use the in_out stMotor as default.
    stForwardMotorEPS : DUT_EPS;
    stBackwardMotorEPS: DUT_EPS;

END_VAR
VAR_INPUT
    // Encoder Position, Current position of motor. Needed for the case where the motor and encoders are seperate. Default use stMotor Position
    fPosition : LREAL;;
    // Allows for user to define what is 'forward' and what is 'backward'. In most cases, use the in_out stMotor as default.

END_VAR
VAR_OUTPUT
END_VAR
VAR
    nPreviousState : DINT;
    nIndex: DINT;
    nEPSIndex: DINT;
    fbBwdEPS: FB_EPS;
    fbFwdEPS: FB_EPS;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbBwdEps(eps:=stBackwardMotorEPS);
fbFwdEPS(eps:=stForwardMotorEPS);

// Look through possible states to see which state we are in
FOR nIndex := LOWER_BOUND(aEPSLimits, 1) TO UPPER_BOUND(aEPSLimits, 1) BY 1 DO
    IF aEPSLimits[nIndex].stEPS.bEPS_OK THEN
        nEPSIndex := nIndex;
    END_IF
END_FOR

IF (nPreviousState <> nEPSIndex) THEN
    // only clear stMotor eps from previous state.
    stBackwardMotorEPS.nFlags := (aEPSLimits[nPreviousState].stEPS.nFlags XOR ( NOT stBackwardMotorEPS.nFlags)) OR stBackwardMotorEPS.nFlags;
    stForwardMotorEPS.nFlags := (aEPSLimits[nPreviousState].stEPS.nFlags XOR ( NOT stForwardMotorEPS.nFlags)) OR stForwardMotorEPS.nFlags;

    // Update Labels
    stBackwardMotorEPS.sFlagDesc := aEPSLimits[nEPSIndex].stEPS.sFlagDesc;
    stForwardMotorEPS.sFlagDesc := aEPSLimits[nEPSIndex].stEPS.sFlagDesc;
END_IF

// Check if position is in plc limit rage, Stop motor if out of Upper/Lower bounds
IF fPosition > aEPSLimits[nEPSIndex].fBwd_Limits THEN
    fbBwdEPS.setBit(DINT_TO_BYTE(nEPSIndex), TRUE);
ELSE
    fbBwdEPS.setBit(DINT_TO_BYTE(nEPSIndex), FALSE);
END_IF

IF fPosition < aEPSLimits[nEPSIndex].fFwd_Limits THEN
    fbFwdEPS.setBit(DINT_TO_BYTE(nEPSIndex), TRUE);
ELSE
    fbFwdEPS.setBit(DINT_TO_BYTE(nEPSIndex), FALSE);
END_IF

nPreviousState := nEPSIndex; // Update Previous State]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>