<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_RCC_Y_EPS" Id="{a9280473-354b-4286-b24d-a3e00c25baca}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_RCC_Y_EPS
VAR
    {attribute 'pytmc' := 'pv: CRIX:RCC:MMS:Y:EPS'}
    aRCC_Y_EPS 	    : ARRAY [1 .. 4] OF ST_EPSLimits;

    {attribute 'pytmc' := 'pv: CRIX:RCC:MMS:Y:EPS:OVRD_MODE'}
    bEPS_Override : BOOL :=  FALSE;

    {attribute 'pytmc' := 'pv: CRIX:RCC:MMS:Y:EPS:OVRD_COUNTDOWN'}
    tEPS_TimerCountDown : STRING := TIME_TO_STRING(T#0s);

    bInit 		: BOOL := TRUE;
    bFullRange	: BOOL;

    fbEPS		: FB_EPS;
    fbCheckEPS 	: FB_CheckEPS;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[ IF bInit THEN
    // Set Inital Values
    aRCC_Y_EPS[1].fBwd_Limits := -38;
    aRCC_Y_EPS[1].fFwd_Limits := 10;

    aRCC_Y_EPS[2].fBwd_Limits := -38;
    aRCC_Y_EPS[2].fFwd_Limits := -34;

    aRCC_Y_EPS[3].fBwd_Limits := -38;
    aRCC_Y_EPS[3].fFwd_Limits := -34;

    aRCC_Y_EPS[4].fBwd_Limits := -38;
    aRCC_Y_EPS[4].fFwd_Limits := 0; // VARIBLE

    bInit := FALSE;
END_IF

fbEPS(eps:=aRCC_Y_EPS[2].stEPS);
fbEPS.setDescription('SDS_RY in [-100, -5];SDS_Z_ENC in [400,495]');
fbEPS.setBit(0, F_InRange(fSDS_RY, -100, -5));
fbEPS.setBit(1, F_InRange(fSDS_Z_ENC, 400, 495));

fbEPS(eps:=aRCC_Y_EPS[3].stEPS);
fbEPS.setDescription('DPL_Z in [-10,30];RCC_Z in [-15,11]');
fbEPS.setBit(0, F_InRange(fDPL_Z, -10, 30));
fbEPS.setBit(1, F_InRange(fRCC_Z, -15, 11));

fbEPS(eps:=aRCC_Y_EPS[4].stEPS);
fbEPS.setDescription('SDS_Z_ENC in [495,510];SDS_Y - RCC_Y <= 36');
fbEPS.setBit(0, F_InRange(fSDS_Z_ENC, 495, 510));
fbEPS.setBit(1, (fSDS_Y - fRCC_Y) <= 36);

aRCC_Y_EPS[4].fFwd_Limits := fSDS_Y - 36; // Variable Limits


bFullRange := (NOT aRCC_Y_EPS[2].stEPS.bEPS_OK) AND (NOT aRCC_Y_EPS[3].stEPS.bEPS_OK) AND (NOT aRCC_Y_EPS[4].stEPS.bEPS_OK);

fbEPS(eps:=aRCC_Y_EPS[1].stEPS);
fbEPS.setDescription('Full Range');
fbEPS.setBit(0, bFullRange);

F_RestTimer(bInput:=bEPS_Override, tElapseTime:=tEPS_OVRD_RESET_TIME, tCountDown:=tEPS_TimerCountDown);
fbCheckEPS(stMotor:=M38, fPosition:=fRCC_Y, aEPSLimits:=aRCC_Y_EPS, stForwardMotorEPS:=M38.stEPSForwardEnable, stBackwardMotorEPS:= M38.stEPSBackwardEnable, bEPS_Override:=bEPS_Override);]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>