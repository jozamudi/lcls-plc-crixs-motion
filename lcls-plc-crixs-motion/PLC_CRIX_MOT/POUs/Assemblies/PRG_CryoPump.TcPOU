<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_CryoPump" Id="{00a70b15-989b-46ed-bbf4-cb0cdca5404b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_CryoPump
VAR
    fbCryoPump_Motor_Y_10 : FB_MotionStage;
    fbCryoPump_Motor_Y_11 : FB_MotionStage;

    bEPS_OK_Y_10: BOOL; //Valve is in the Open State And communication ok
    bEPS_OK_Y_11: BOOL; //Valve is in the Open State And communication ok

    bInit : BOOl := TRUE;

    (*Limit switches*)
    {attribute 'TcLinkTo' := 'TIIB[DRL02-E23 (EL7041)]^STM Status^Status^Digital input 1'}
    bLimitBackwardEnable_Y_10 AT %I* :BOOL;
    {attribute 'TcLinkTo' := 'TIIB[DRL02-E21 (EL7041)]^STM Status^Status^Digital input 1'}
    bLimitBackwardEnable_Y_11 AT %I* :BOOL;

    (*ETHERCAT BRRIDGE COM STATUS*)
    //0: Other side is in OP state, >0: Error
    {attribute 'pytmc' := 'pv:  CRIX:MOT2VAC:ECATBRG:TxPDO_state'}
    {attribute 'TcLinkTo' := 'TIIB[CRIX_VAC_INTF (EL6695-0002)]^SYNC Inputs^TxPDO state'}
    xEcatBridge_TxPDO_state AT %I* :BOOL;

    //0: External device connectd, 1: External device not connected
    {attribute 'pytmc' := 'pv:  CRIX:MOT2VAC:ECATBRG:External_device_not_connected'}
    {attribute 'TcLinkTo':= 'TIIB[CRIX_VAC_INTF (EL6695-0002)]^SYNC Inputs^External device not connected'}
    xEcatBridge_External_device_not_connected AT %I* : BOOL;

    //0 = Data valid, 1 = Data invalid
    {attribute 'pytmc' := 'pv:  CRIX:MOT2VAC:ECATBRG:WcState'}
    {attribute 'TcLinkTo' := 'TIIB[CRIX_VAC_INTF (EL6695-0002)]^WcState^WcState'}
    xEcatBridge_WcState AT %I* : BOOL;

    //Inputs
    {attribute 'TcLinkTo' := 'TIIB[CRIX_VAC_INTF (EL6695-0002)]^IO Inputs^bCRYO_VGC_01_CLS'}
    bCRYO_VGC_01_CLS AT %I* : BOOL;
    {attribute 'TcLinkTo' := 'TIIB[CRIX_VAC_INTF (EL6695-0002)]^IO Inputs^bCRYO_VGC_01_OPN'}
    bCRYO_VGC_01_OPN AT %I* : BOOL;
    {attribute 'TcLinkTo' := 'TIIB[CRIX_VAC_INTF (EL6695-0002)]^IO Inputs^bCRYO_VGC_02_CLS'}
    bCRYO_VGC_02_CLS AT %I* : BOOL;
    {attribute 'TcLinkTo' := 'TIIB[CRIX_VAC_INTF (EL6695-0002)]^IO Inputs^bCRYO_VGC_02_OPN'}
    bCRYO_VGC_02_OPN AT %I* : BOOL;

    //Outputs
    {attribute 'TcLinkTo' := 'TIIB[CRIX_VAC_INTF (EL6695-0002)]^IO Outputs^bMOTY10_IN'}
    bMOTY10_IN AT %Q* : BOOL;
    {attribute 'TcLinkTo' := 'TIIB[CRIX_VAC_INTF (EL6695-0002)]^IO Outputs^bMOTY10_OUT'}
    bMOTY10_OUT AT %Q* : BOOL;
    {attribute 'TcLinkTo' := 'TIIB[CRIX_VAC_INTF (EL6695-0002)]^IO Outputs^bMOTY11_IN'}
    bMOTY11_IN AT %Q* : BOOL;
    {attribute 'TcLinkTo' := 'TIIB[CRIX_VAC_INTF (EL6695-0002)]^IO Outputs^bMOTY11_OUT'}
    bMOTY11_OUT AT %Q* : BOOL;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF ( bInit) THEN
    bInit := FALSE;
    Main.M48.bHardwareEnable := TRUE; //Linked to valve state
    Main.M48.bPowerSelf := TRUE;
    Main.M48.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M48.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M49.bHardwareEnable := TRUE; //Linked to valve state
    Main.M49.bPowerSelf := TRUE;
    Main.M49.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M49.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;

    //Homing routine parameters
    Main.M48.fHomePosition:= 0;
    Main.M48.nHomingMode := ENUM_EpicsHomeCmd.HIGH_LIMIT;
    Main.M49.fHomePosition:= 0;
    Main.M49.nHomingMode := ENUM_EpicsHomeCmd.HIGH_LIMIT;
END_IF

fbCryoPump_Motor_Y_10(stMotionStage:=Main.M48);
fbCryoPump_Motor_Y_11(stMotionStage:=Main.M49);

//Interface
bMOTY10_IN := NOT bLimitBackwardEnable_Y_10;
bMOTY10_OUT := NOT Main.M48.bLimitForwardEnable;
bMOTY11_IN := NOT bLimitBackwardEnable_Y_11;
bMOTY11_OUT := NOT Main.M49.bLimitForwardEnable;
bEPS_OK_Y_10 := (NOT bCRYO_VGC_01_CLS) AND bCRYO_VGC_01_OPN AND NOT (xEcatBridge_External_device_not_connected) AND NOT (xEcatBridge_WcState) AND NOT (xEcatBridge_TxPDO_state);
bEPS_OK_Y_11 := (NOT bCRYO_VGC_02_CLS) AND bCRYO_VGC_02_OPN AND NOT (xEcatBridge_External_device_not_connected) AND NOT (xEcatBridge_WcState) AND NOT (xEcatBridge_TxPDO_state);



//Handle EPS
Main.M48.bLimitBackwardEnable := bEPS_OK_Y_10 AND bLimitBackwardEnable_Y_10;
Main.M49.bLimitBackwardEnable := bEPS_OK_Y_11 AND bLimitBackwardEnable_Y_11;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>