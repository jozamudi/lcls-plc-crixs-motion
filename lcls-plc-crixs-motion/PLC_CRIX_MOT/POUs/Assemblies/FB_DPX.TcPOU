<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_DPX" Id="{49675e71-8013-41ea-b99d-4886b7617931}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DPX

VAR_IN_OUT
    // Motor to apply states to
    stMotionStage: DUT_MotionStage;
    // Information about the park position
    stPark: DUT_PositionState;
    // Information about the center parameter
    stCenter: DUT_PositionState;
    // Information about the knife edge parameter
    stKnife: DUT_PositionState;
END_VAR
VAR_INPUT
    // If TRUE, the motor will be moved when enumSet is changed
    bEnable: BOOL;
    // When changed, sets the destination and starts a move
    {attribute 'pytmc' := '
        pv: SET
        io: io
    '}
    enumSet: ENUM_DPX;
    bOverride: BOOL; // Override for state locking. If TRUE, do not lock states.
END_VAR
VAR_OUTPUT
    // If TRUE, we are in an error state
    bError: BOOL; // NOTE: do not pragma these, already has pragma in manager
    // Error code
    nErrorId: UDINT;
    // Message associated with bError = TRUE
    sErrorMessage: STRING;
    // If TRUE, we are currently moving between states
    bBusy: BOOL;
    // If TRUE, we asked for a move between states, it completed successfully, and there is no ongoing move
    bDone: BOOL;
    // The current state readback
    {attribute 'pytmc' := '
        pv: GET
        io: i
    '}
    enumGet: ENUM_DPX; // NOTE: Please copy this pragma exactly on your enumGet
END_VAR
VAR
    bInit: BOOL;
    arrStates: ARRAY[1..15] OF DUT_PositionState;

    {attribute 'pytmc' := '
        pv:
        io: io
    '}
    fbStateManager: FB_PositionStateManager; // NOTE: Please copy this pragma exactly to pick up the standard PVs
    fbLockPark: 	FB_PositionStateLock;
    fbLockCenter: 	FB_PositionStateLock;
    fbLockKnife: 	FB_PositionStateLock;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Fist cycle setup
IF NOT bInit THEN
    stPark.sName := 'PARK';
    stCenter.sName := 'CENTER';
    stKnife.sName := 'KNIFE';
    bInit := TRUE;
END_IF

// If any of these have bLocked = TRUE, do not allow user to change them
IF NOT bOverride THEN
    fbLockPark(stPositionState:=stPark);
    fbLockCenter(stPositionState:=stCenter);
    fbLockKnife(stPositionState:=stKnife);
END_IF

// Stuff values into the 15 element array for the manager
arrStates[1] := stPark;
arrStates[2] := stCenter;
arrStates[3] := stKnife;

// Call the function block every cycle
fbStateManager(
    stMotionStage := stMotionStage,
    arrStates := arrStates,
    setState := enumSet,
    bEnable := bEnable,
    bError => bError,
    nErrorId => nErrorId,
    sErrorMessage => sErrorMessage,
    bBusy => bBusy,
    bDone => bDone,
    getState => enumGet); // Cannot do this assignment if enumGet has attribute strict]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>